#!/usr/bin/env node

/**
 * Module dependencies.
 */

var appData = require('../app');
var app  = appData.app;
var sessionParser = appData.sessionParser;

var debug = require('debug')('memphis:server');
//var http = require('http');
var fs = require('fs');
var https = require('https');
var privateKey  = fs.readFileSync('./sslcert/server.key', 'utf8');
var certificate = fs.readFileSync('./sslcert/server.crt', 'utf8');
var credentials = {key: privateKey, cert: certificate};

/**
 * Create HTTPS server.
 */

var server = https.createServer(credentials, app);//http.createServer(app);
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.APP_PORT || '3000');
app.set('port', port);





/*
* Sets ws server
*/
var WebSocket = require('ws');
var WsService = require('../services/ws');


var wss = new WebSocket.Server({
  server: server,
    verifyClient:function (info,done) {

        sessionParser(info.req, {},function () {

          if(!info.req.session.passport || !info.req.session.passport.user)
          {
            return done(false);
          }

            done(true);

        });

    }});



//all connected to the server users

//when a user connects to our sever
wss.on('connection',WsService.OnConnection);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
